library("Measure", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
remove.packages("Measure")
load (file = "/Users/mateuszkiebala/Documents/studia/zpp/svm/svm_total.RData")
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target = y.test[,i], prediction = svm.res[i,])
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
print (summary(tpr.res))
print (summary(tnr.res))
print (summary(fpr.res))
print (summary(fnr.res))
print (summary(precision.res))
print (summary(accuracy.res))
library(Measure)
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target = y.test[,i], prediction = svm.res[i,])
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
print (summary(tpr.res))
print (summary(tnr.res))
print (summary(fpr.res))
print (summary(fnr.res))
print (summary(precision.res))
print (summary(accuracy.res))
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target = y.test[,i], prediction = svm.res[i,])
print (target)
print (prediction)
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (target)
print (prediction)
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (target)
print (as.numeric(prediction))
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (target)
print (round(as.numeric(prediction), 3))
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (data.frame(t = target, p = round(as.numeric(prediction), 3)))
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
source('~/Documents/studia/sus/sus/knn.R')
library(FactoRizationMachines)
?SVM.train
?predict
?SVM.train
c(1,2,3) <- 0
setwd("/Users/mateuszkiebala/Documents/studia/sus/sus/puczlu")
library(nnet)
library(AMORE)
dataSet = read.table(file = file.choose(getwd()), header = F, sep=',', row.names=1, na.strings="?")
colnames(dataSet) = c("diagnosis",
paste(c(rep("mean",10), rep("SE",10), rep("worst",10)),
rep(c("radius", "texture", "perimeter", "area",
"smoothness", "compactness", "concavity",
"concave_points", "symmetry", "fractal_dimension"),3),
sep="_"))
clsVec = dataSet[[1]]
dataSet = dataSet[-1]
clsVec = sapply(clsVec, function(x) if (x == "M") 1 else -1)
library(AMORE)
myNNet = newff(n.neurons = c(30,3,1), learning.rate.global = 0.01, momentum.global = 0.5,
error.criterium = "LMS", Stao=NA, hidden.layer = "sigmoid", output.layer = "sigmoid")
myNNetModel = train(myNNet, as.data.frame(dataSet), as.numeric(clsVec),
report=TRUE, n.shows = 50, show.step = 1000)
