library("Measure", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
remove.packages("Measure")
load (file = "/Users/mateuszkiebala/Documents/studia/zpp/svm/svm_total.RData")
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target = y.test[,i], prediction = svm.res[i,])
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
print (summary(tpr.res))
print (summary(tnr.res))
print (summary(fpr.res))
print (summary(fnr.res))
print (summary(precision.res))
print (summary(accuracy.res))
library(Measure)
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target = y.test[,i], prediction = svm.res[i,])
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
print (summary(tpr.res))
print (summary(tnr.res))
print (summary(fpr.res))
print (summary(fnr.res))
print (summary(precision.res))
print (summary(accuracy.res))
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target = y.test[,i], prediction = svm.res[i,])
print (target)
print (prediction)
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (target)
print (prediction)
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (target)
print (as.numeric(prediction))
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (target)
print (round(as.numeric(prediction), 3))
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
tpr.res = vector(length = dim(data.test)[1])
tnr.res = vector(length = dim(data.test)[1])
fpr.res = vector(length = dim(data.test)[1])
fnr.res = vector(length = dim(data.test)[1])
precision.res = vector(length = dim(data.test)[1])
accuracy.res = vector(length = dim(data.test)[1])
for (i in (1:dim(data.test)[1])) {
m = MEASURE$new(target <- y.test[,i], prediction <- svm.res[i,])
print (data.frame(t = target, p = round(as.numeric(prediction), 3)))
threshold = 0.625
tpr.res[i] <- m$truePositiveRate(threshold)
tnr.res[i] <- m$trueNegativeRate(threshold)
fpr.res[i] <- m$falsePositiveRate(threshold)
fnr.res[i] <- m$falseNegativeRate(threshold)
precision.res[i] <- m$precision(threshold)
accuracy.res[i] <- m$accuracy(threshold)
}
source('~/Documents/studia/sus/sus/knn.R')
library(FactoRizationMachines)
?SVM.train
?predict
?SVM.train
c(1,2,3) <- 0
recommendedEventsWithPred <- function (target, pred, threshold) {
tp <- data.frame(t = target, p = pred, event = 1:length(target))
tp <- tp[tp$t == 0 & abs(tp$p) > threshold,]
return (rec)
}
recommendedEventsWithPred(c(0,0,1,1), c(0.65, 0.025, 1, 1), 0.5)
recommendedEventsWithPred <- function (target, pred, threshold) {
tp <- data.frame(t = target, p = pred, event = 1:length(target))
tp <- tp[tp$t == 0 & abs(tp$p) > threshold,]
return (tp)
}
recommendedEventsWithPred(c(0,0,1,1), c(0.65, 0.025, 1, 1), 0.5)
recommendedEventsWithPred <- function (target, pred, threshold) {
tp <- data.frame(t = target, p = pred, event = 1:length(target))
rec <- as.numeric(pred)
tp <- tp[tp$t == 0 & abs(tp$p) > threshold,]
rec[-tp$event] <- 0
return (tp)
}
recommendedEventsWithPred(c(0,0,1,1), c(0.65, 0.025, 1, 1), 0.5)
recommendedEventsWithPred <- function (target, pred, threshold) {
tp <- data.frame(t = target, p = pred, event = 1:length(target))
rec <- as.numeric(pred)
tp <- tp[tp$t == 0 & abs(tp$p) > threshold,]
rec[-tp$event] <- 0
return (rec)
}
recommendedEventsWithPred(c(0,0,1,1), c(0.65, 0.025, 1, 1), 0.5)
recommendedEventsWithPred(c(0,0,1,1,0), c(0.65, 0.025, 1, 1, 0.51), 0.5)
recommendedEventsWithPred(c(0,0,1,1,0), c(0.65, 0.025, 1, 1, -0.51), 0.5)
getVectorOfClassifiedEvents(c(0,0,1,1,0), c(0.65, 0.025, 1, 1, -0.51), 0.5)
getVectorOfClassifiedEvents <- function (target, pred, threshold) {
tp <- data.frame(t = target, p = pred, event = 1:length(target))
rec <- as.numeric(vector(length = length(target)))
tp <- tp[tp$t == 0 & abs(tp$p) > threshold,]
rec[tp$event] <- 1
return (rec)
}
#' @return Vector of events that are marked as recommended.
#' @export
getRecommendedEvents <- function (target, pred, threshold) {
tp <- data.frame(t = target, p = pred, event = 1:length(target))
tp <- tp[tp$t == 0 & abs(tp$p) > threshold,]
return (tp$event)
}
#' @return Vector of 0/x (where x is prediction of event) depending on event is recommended or not.
#' @export
recommendedEventsWithPred <- function (target, pred, threshold) {
tp <- data.frame(t = target, p = pred, event = 1:length(target))
rec <- as.numeric(pred)
tp <- tp[tp$t == 0 & abs(tp$p) > threshold,]
rec[-tp$event] <- 0
return (rec)
}
getVectorOfClassifiedEvents(c(0,0,1,1,0), c(0.65, 0.025, 1, 1, -0.51), 0.5)
setwd("~/Documents/studia/sus/sus")
library(nnet)
library(AMORE)
library(ROCR)
?train
subset = sample(dim(iris)[1], size = dim(iris)[1] * 0.8, replace = F)
iris.train = iris[subset,]
iris.test = iris[-subset,]
myNNet = newff(n.neurons = c(4,10,1), learning.rate.global = 0.4, momentum.global = 0.3,
error.criterium = "LMS", Stao=NA, hidden.layer = "sigmoid", output.layer = "sigmoid")
myNNetModel = train(myNNet, iris.train[,1:4], as.numeric(iris.train[,5]), report=F, n.shows = 10, show.step = 100)
scores = sim.MLPnet(myNNetModel$net, iris.test[,1:4])
scores
subset = sample(dim(iris)[1], size = dim(iris)[1] * 0.8, replace = F)
data.iris = iris
data.iris = cbind(data.iris, iris$Species == 'setosa')
data.iris = cbind(data.iris, iris$Species == 'versicolor')
data.iris = cbind(data.iris, iris$Species == 'virginica')
data.iris.train = data.iris[subset,]
data.iris.test = data.iris[-subset,]
View(data.iris.train)
subset = sample(dim(iris)[1], size = dim(iris)[1] * 0.8, replace = F)
data.iris = iris
data.iris = cbind(data.iris, setosa = iris$Species == 'setosa')
data.iris = cbind(data.iris, versicolor = iris$Species == 'versicolor')
data.iris = cbind(data.iris, virginica = iris$Species == 'virginica')
data.iris.train = data.iris[subset,]
data.iris.test = data.iris[-subset,]
View(data.iris.test)
myNNet = newff(n.neurons = c(4,10,3), learning.rate.global = 0.4, momentum.global = 0.3,
error.criterium = "LMS", Stao=NA, hidden.layer = "sigmoid", output.layer = "sigmoid")
myNNetModel = train(myNNet, data.iris.train[,1:4], data.iris.train[,6:8], report=F, n.shows = 10, show.step = 100)
subset = sample(dim(iris)[1], size = dim(iris)[1] * 0.8, replace = F)
data.iris = iris
data.iris = cbind(data.iris, setosa = as.numeric(iris$Species == 'setosa'))
data.iris = cbind(data.iris, versicolor = as.numeric(iris$Species == 'versicolor'))
data.iris = cbind(data.iris, virginica = as.numeric(iris$Species == 'virginica'))
data.iris.train = data.iris[subset,]
data.iris.test = data.iris[-subset,]
View(iris.test)
View(data.iris.train)
myNNet = newff(n.neurons = c(4,10,3), learning.rate.global = 0.4, momentum.global = 0.3,
error.criterium = "LMS", Stao=NA, hidden.layer = "sigmoid", output.layer = "sigmoid")
myNNetModel = train(myNNet, data.iris.train[,1:4], data.iris.train[,6:8], report=F, n.shows = 10, show.step = 100)
scores = sim.MLPnet(myNNetModel$net, iris.test[,1:4])
scores
?compute
prediction(scores, data.iris.test[,6:8])
predict.nnet(myNNetModelm data.iris.test[,1:4])
predict(myNNetModelm, data.iris.test[,1:4])
predict(myNNetModel, data.iris.test[,1:4])
source('~/Documents/studia/sus/sus/lab6.R')
?neuralnet
library(neuralnet)
library(neuralnet)
?neuralnet
nnetModel = neuralnet(setosa+versicolor+virginica ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data.iris.train, hidden = c(10), stepmax = 100)
nnetModel = neuralnet(setosa+versicolor+virginica ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data.iris.train, hidden = c(10))
subset = sample(dim(iris)[1], size = dim(iris)[1] * 0.8, replace = F)
data.iris = iris
data.iris = cbind(data.iris, setosa = as.numeric(iris$Species == 'setosa'))
data.iris = cbind(data.iris, versicolor = as.numeric(iris$Species == 'versicolor'))
data.iris = cbind(data.iris, virginica = as.numeric(iris$Species == 'virginica'))
data.iris.train = data.iris[subset,]
data.iris.test = data.iris[-subset,]
myNNetModel = train(myNNet, data.iris.train[,1:4], data.iris.train[,6:8], report=F, n.shows = 10, show.step = 100)
myNNet = newff(n.neurons = c(4,10,3), learning.rate.global = 0.4, momentum.global = 0.3,
error.criterium = "LMS", Stao=NA, hidden.layer = "sigmoid", output.layer = "sigmoid")
predict(myNNetModel, data.iris.test[,1:4])
scores = sim.MLPnet(myNNetModel$net, data.iris.test[,1:4])
scores
plot(prediction(scores, data.iris.test[,6:8]))
performance(preds, measure="acc")
preds = prediction(scores, data.iris.test[,6:8])
prediction(scores, data.iris.test[,6:8])
scores = sim.MLPnet(myNNetModel$net, data.iris.test[,1:4])
scores
data.iris.test[,6:8]
prediction(scores, data.iris.test[,6:8])
library(ROCR)
preds = prediction(scores, data.iris.test[,6:8])
source('~/Documents/studia/sus/sus/lab6.R')
?prediction
preds = ROCR::prediction(scores, data.iris.test[,6:8])
preds
ROCR::performance(preds, measure="acc")
?AMORE
?nnet
plot(ROCR::performance(preds, measure="acc"))
nnet predict()
?nnet
is(myNNet)
?sim.MLPnet
plot(ROCR::performance(preds, measure="acc"))
library(neuralnet)
subset = sample(dim(iris)[1], size = dim(iris)[1] * 0.8, replace = F)
data.iris = iris
data.iris = cbind(data.iris, setosa = as.numeric(iris$Species == 'setosa'))
data.iris = cbind(data.iris, versicolor = as.numeric(iris$Species == 'versicolor'))
data.iris = cbind(data.iris, virginica = as.numeric(iris$Species == 'virginica'))
data.iris.train = data.iris[subset,]
data.iris.test = data.iris[-subset,]
neuralnet(setosa+versicolor+virginica ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=nnet_iristrain, hidden=c(3))
neuralnet(setosa+versicolor+virginica ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=data.iris.train, hidden=c(3))
preds = compute(nnetModel, data.iris.test[,1:4])$net.result
compute(nnetModel, data.iris.test[,1:4])
data.iris.test[,1:4]
preds = compute(nnetModel, data.iris.test[,-5])$net.result
preds = compute(nnetModel, iris[,-5])$net.result
iris[,-5]
?compute
